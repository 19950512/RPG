services:
  gameserver:
    build: .
    container_name: gameserver-dev
    ports:
      - "5001:5001"
      - "5002:5002"
      - "5008:5008"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001;http://+:5002
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=gameserver;Username=gameuser;Password=gamepass123
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./certs:/app/certs:ro
      - ./src/GameServer:/app/src:ro  # For hot reload in development
    networks:
      - gameserver-network
    restart: unless-stopped
    command: >
      sh -c "until pg_isready -h postgres -U gameuser -d gameserver; do echo 'Aguardando o banco ficar pronto...'; sleep 2; done; dotnet ef database update --project src/GameServer/GameServer.csproj --no-build && dotnet GameServer.dll"

  postgres:
    image: postgres:16-alpine
    container_name: gameserver-postgres-dev
    environment:
      - POSTGRES_DB=gameserver
      - POSTGRES_USER=gameuser
      - POSTGRES_PASSWORD=gamepass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - gameserver-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameuser -d gameserver"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_dev_data:
    driver: local

networks:
  gameserver-network:
    driver: bridge
