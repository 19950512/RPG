#!/bin/bash

# Script de configura√ß√£o do ambiente de desenvolvimento para RPG Game Server
# Execute este script ap√≥s clonar o reposit√≥rio
# Uso: ./setup-dev-environment.sh

set -e  # Para o script em caso de erro

echo "üéÆ Configurando ambiente de desenvolvimento para RPG Game Server..."
echo "================================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.yml" ] || [ ! -d "src/GameServer" ]; then
    echo "‚ùå Erro: Execute este script na raiz do reposit√≥rio RPG"
    echo "   Certifique-se de estar no diret√≥rio que cont√©m docker-compose.yml"
    exit 1
fi

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar depend√™ncias b√°sicas
echo "üîç Verificando depend√™ncias do sistema..."

if ! command_exists python3; then
    echo "‚ùå Python 3 n√£o encontrado. Instalando..."
    if command_exists apt-get; then
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv
    elif command_exists yum; then
        sudo yum install -y python3 python3-pip
    elif command_exists brew; then
        brew install python3
    else
        echo "‚ùå N√£o foi poss√≠vel instalar Python 3. Instale manualmente."
        exit 1
    fi
fi

if ! command_exists docker; then
    echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker primeiro:"
    echo "   https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command_exists docker-compose; then
    echo "‚ùå Docker Compose n√£o encontrado. Por favor, instale o Docker Compose:"
    echo "   https://docs.docker.com/compose/install/"
    exit 1
fi

if ! command_exists git; then
    echo "‚ùå Git n√£o encontrado. Instalando..."
    if command_exists apt-get; then
        sudo apt-get install -y git
    elif command_exists yum; then
        sudo yum install -y git
    elif command_exists brew; then
        brew install git
    else
        echo "‚ùå N√£o foi poss√≠vel instalar Git. Instale manualmente."
        exit 1
    fi
fi

echo "‚úÖ Depend√™ncias do sistema verificadas"

# Criar ambiente virtual Python
echo "üêç Configurando ambiente virtual Python..."
VENV_DIR="venv"

if [ -d "$VENV_DIR" ]; then
    echo "‚ö†Ô∏è  Ambiente virtual j√° existe. Removendo e recriando..."
    rm -rf "$VENV_DIR"
fi

python3 -m venv "$VENV_DIR"
source "$VENV_DIR/bin/activate"

echo "‚úÖ Ambiente virtual Python criado e ativado"

# Instalar depend√™ncias Python
echo "üì¶ Instalando depend√™ncias Python..."
pip install --upgrade pip

# Instalar depend√™ncias do cliente
if [ -f "src/GameClient/requirements.txt" ]; then
    pip install -r src/GameClient/requirements.txt
    echo "‚úÖ Depend√™ncias do GameClient instaladas"
else
    echo "‚ö†Ô∏è  Arquivo requirements.txt n√£o encontrado. Instalando depend√™ncias b√°sicas..."
    pip install grpcio grpcio-tools pygame protobuf
fi

# Verificar se .NET est√° instalado (opcional para desenvolvimento do cliente)
echo "üîß Verificando .NET SDK (opcional para servidor)..."
if command_exists dotnet; then
    echo "‚úÖ .NET SDK encontrado: $(dotnet --version)"
else
    echo "‚ö†Ô∏è  .NET SDK n√£o encontrado. Isso √© opcional se voc√™ s√≥ vai trabalhar com o cliente Python."
    echo "   Para desenvolvimento completo, instale .NET 8.0 SDK:"
    echo "   https://dotnet.microsoft.com/download/dotnet/8.0"
fi

# Configurar arquivos de ambiente
echo "‚öôÔ∏è  Configurando arquivos de ambiente..."
if [ ! -f "dev.env" ]; then
    if [ -f "dev.env.example" ]; then
        cp dev.env.example dev.env
        echo "‚úÖ Arquivo dev.env criado a partir do exemplo"
    else
        echo "‚ö†Ô∏è  dev.env.example n√£o encontrado"
    fi
fi

if [ ! -f "test_connection.sh" ]; then
    if [ -f "test_connection.sh.example" ]; then
        cp test_connection.sh.example test_connection.sh
        chmod +x test_connection.sh
        echo "‚úÖ Script de teste criado e tornado execut√°vel"
    else
        echo "‚ö†Ô∏è  test_connection.sh.example n√£o encontrado"
    fi
fi

# Gerar certificados se necess√°rio
echo "üîê Verificando certificados..."
if [ ! -f "certs/gameserver.crt" ] || [ ! -f "certs/gameserver.key" ]; then
    if [ -f "scripts/generate-certs.sh" ]; then
        echo "üîë Gerando certificados SSL..."
        chmod +x scripts/generate-certs.sh
        ./scripts/generate-certs.sh
        echo "‚úÖ Certificados SSL gerados"
    else
        echo "‚ö†Ô∏è  Script de gera√ß√£o de certificados n√£o encontrado"
    fi
fi

# Criar script de ativa√ß√£o do ambiente
echo "üìù Criando script de ativa√ß√£o..."
cat > activate-env.sh << 'EOF'
#!/bin/bash
# Script para ativar o ambiente virtual
# Uso: source ./activate-env.sh

if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
    echo "üêç Ambiente virtual Python ativado"
    echo "üìÅ Para desativar: deactivate"
else
    echo "‚ùå Ambiente virtual n√£o encontrado. Execute setup-dev-environment.sh primeiro"
fi
EOF
chmod +x activate-env.sh

# Criar script para executar o cliente
echo "üéÆ Criando script para executar o cliente..."
cat > run-client.sh << 'EOF'
#!/bin/bash
# Script para executar o cliente do jogo
# Uso: ./run-client.sh

# Ativar ambiente virtual se n√£o estiver ativo
if [ -z "$VIRTUAL_ENV" ]; then
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
        echo "üêç Ambiente virtual ativado"
    else
        echo "‚ùå Ambiente virtual n√£o encontrado. Execute setup-dev-environment.sh primeiro"
        exit 1
    fi
fi

# Ir para o diret√≥rio do cliente
cd src/GameClient

# Verificar se o servidor est√° rodando
echo "üîç Verificando se o servidor est√° rodando..."
if ! docker-compose -f ../../docker-compose.yml ps | grep -q "gameserver.*Up"; then
    echo "‚ö†Ô∏è  Servidor n√£o est√° rodando. Iniciando..."
    cd ../..
    docker-compose up -d
    echo "‚è±Ô∏è  Aguardando servidor inicializar..."
    sleep 5
    cd src/GameClient
fi

echo "üéÆ Iniciando cliente do jogo..."
python main.py
EOF
chmod +x run-client.sh

# Criar script para parar todos os servi√ßos
echo "üõë Criando script para parar servi√ßos..."
cat > stop-all.sh << 'EOF'
#!/bin/bash
# Script para parar todos os servi√ßos Docker
echo "üõë Parando todos os servi√ßos..."
docker-compose down
echo "‚úÖ Todos os servi√ßos foram parados"
EOF
chmod +x stop-all.sh

# Testar conex√£o com Docker
echo "üê≥ Testando Docker..."
if docker info >/dev/null 2>&1; then
    echo "‚úÖ Docker est√° funcionando"
else
    echo "‚ùå Docker n√£o est√° funcionando. Verifique se o servi√ßo est√° rodando:"
    echo "   sudo systemctl start docker  # Linux"
    echo "   # ou inicie o Docker Desktop"
fi

# Informa√ß√µes finais
echo ""
echo "üéâ CONFIGURA√á√ÉO CONCLU√çDA!"
echo "=========================="
echo ""
echo "üìã O que foi configurado:"
echo "   ‚úÖ Ambiente virtual Python em 'venv/'"
echo "   ‚úÖ Depend√™ncias Python instaladas"
echo "   ‚úÖ Scripts de desenvolvimento criados"
echo "   ‚úÖ Arquivos de configura√ß√£o preparados"
echo ""
echo "üöÄ Para come√ßar a desenvolver:"
echo "   1. Ative o ambiente virtual:"
echo "      source ./activate-env.sh"
echo ""
echo "   2. Inicie o servidor (primeira vez pode demorar):"
echo "      docker-compose up -d"
echo ""
echo "   3. Execute o cliente:"
echo "      ./run-client.sh"
echo ""
echo "üìÅ Scripts √∫teis criados:"
echo "   ‚Ä¢ ./activate-env.sh     - Ativa o ambiente Python"
echo "   ‚Ä¢ ./run-client.sh       - Executa o cliente do jogo"
echo "   ‚Ä¢ ./stop-all.sh         - Para todos os servi√ßos"
echo ""
echo "üê≥ Comandos Docker √∫teis:"
echo "   ‚Ä¢ docker-compose up -d          - Inicia os servi√ßos"
echo "   ‚Ä¢ docker-compose down           - Para os servi√ßos"
echo "   ‚Ä¢ docker-compose logs gameserver - Ver logs do servidor"
echo "   ‚Ä¢ docker-compose ps             - Status dos servi√ßos"
echo ""
echo "üîß Desenvolvimento:"
echo "   ‚Ä¢ C√≥digo do servidor: src/GameServer/"
echo "   ‚Ä¢ C√≥digo do cliente:  src/GameClient/"
echo "   ‚Ä¢ Logs:              logs/"
echo ""
echo "‚ùì Em caso de problemas:"
echo "   ‚Ä¢ Verifique os logs: docker-compose logs"
echo "   ‚Ä¢ Reinicie os servi√ßos: docker-compose restart"
echo "   ‚Ä¢ Reconstrua as imagens: docker-compose build --no-cache"
echo ""
echo "‚ú® Ambiente pronto para desenvolvimento!"
